// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                          String    @id @default(cuid())
  firstName                   String
  lastName                    String
  userName                    String    @unique
  email                       String    @unique
  password                    String
  profileImage                String? 
  role                        String    @default("User")
  emailConfirmed              Boolean   @default(false)
  emailConfirmationToken      String?
  emailConfirmationExpiresAt  DateTime?
  resetPasswordToken          String?
  resetPasswordExpiresAt      DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  // Friend relationships
  friendshipsInitiated Friendship[] @relation("UserFriends")
  friendshipsReceived  Friendship[] @relation("FriendUser")
  messagesSent         Message[]    @relation("SentMessages")
  messagesReceived     Message[]    @relation("ReceivedMessages")
  notificationsSent    Notification[] @relation("SentNotifications")
  notificationsReceived Notification[] @relation("ReceivedNotifications")
}

model Friendship {
  id            String   @id @default(cuid())
  userId        String
  friendId      String
  createdAt     DateTime @default(now())
  isCloseFriend Boolean  @default(false)

  user   User @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendUser", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String
  receiverId  String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // e.g., "NEW_FRIEND", "NEW_MESSAGE", etc.
  content     String
  senderId    String
  receiverId  String
  linkUrl     String   @default("/profile")
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender   User @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
}